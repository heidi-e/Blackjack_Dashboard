"""
this is just for testing and the code below was generated by chat GPT
- good for reference/ideas/framework but it doesnt work the way we want it to work for our project

"""



import pandas as pd

optimal_solution = pd.read_csv("BlackJack_Optimal_Solution.csv")

CARD_VALUES = {'A': 11, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 10, 'Q': 10, 'K': 10}


class Hand():
    def __init__(self, card_val1, card_val2):
        self.cards = [card_val1, card_val2]
        self.user_hand = []
        self.value_ten_cards()

    def if_ace_present(self):
        """
        If the hand of the player has an Ace, concatenate the cards together with "AOther_Value"
        """
        if 'A' in [self.card_val1, self.card_val2]:
            # Ace is present, get the other card value
            if self.card_val1 == 'A':
                other_value = self.card_val2
            else:
                other_value = self.card_val1

            # Concatenate the 'A' string and the other value
            ace_value = CARD_VALUES['AOther_Value']
            combined_value = 'A' + other_value

            # If the combined value exceeds 21, use the alternative value of the Ace
            if CARD_VALUES[other_value] + ace_value > 21:
                combined_value = str(CARD_VALUES[other_value] + CARD_VALUES['A'])
            else:
                combined_value = str(CARD_VALUES[other_value] + ace_value)

            self.user_hand.append(combined_value)

        else:
            # No Ace in the hand, add the card values separately
            self.user_hand.append(str(CARD_VALUES[self.card_val1]))
            self.user_hand.append(str(CARD_VALUES[self.card_val2]))

        return self.user_hand


    def value_ten_cards(self):
        """
        whenever a face card is pulled, change the value to ten and make it into a T
        """
        for i in range(len(self.cards)):
            if self.cards[i] in ["10", "J", "Q", "K"]:
                self.cards[i] = "T"

    def duplicate_cards(self):
        """
        if the player's cards are the same, put them together
        """
        if len(set(self.cards)) == 1:
            print(self.cards[0] + self.cards[1])
        else:
            self.calculate_score()

    def blackjack(self):
        """
        if the player wins the game by getting 21
        """
        if self.calculate_score() == 21:
            print("Player Wins")

    def calculate_score(self):
        """
        Calculate the sum of the player's hand
        """
        total = 0
        for card in self.cards:
            total += CARD_VALUES[card]
        return total

    def get_action(self, house_upcard):
        """
        gets the action to take based on the player's hand and the house's upcard
        """
        row = optimal_solution[optimal_solution["value"] == str(self.calculate_score())]
        action = row[house_upcard]
        return action

    def main():
        card_val1 = "10"
        card_val2 = "A"
        house_upcard = "7"

        hand = Hand(card_val1, card_val2)
        hand.if_ace_present()

        hand = Hand(card_val1, card_val2)
        hand.duplicate_cards()

        hand = Hand(card_val1, card_val2)
        hand.blackjack()

        hand = Hand(card_val1, card_val2)
        score = hand.calculate_score()
        action = hand.get_action(house_upcard)
        print(f"The player's hand has a value of {score} and should {action}")


def main():
    card_val1 = "10"
    card_val2 = "A"
    house_upcard = "7"


"""
    hand = Hand(card_val1, card_val2)
    hand.if_ace_present()

    hand = Hand(card_val1, card_val2)
    hand.duplicate_cards()

    hand = Hand(card_val1, card_val2)
    hand.blackjack()

    hand = Hand(card_val1, card_val2)
    score = hand.calculate_score()
    action = hand.get_action(house_upcard)
    print(f"The player's hand has a value of {score} and should {action}")



"""


if __name__=="__main__":
    main()



